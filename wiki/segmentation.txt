MIRACL v. 0.5
______________


1) Segment CLARITY 3D
___________________________________________

miracl_seg_clarity_neurons_wrapper.sh

	Usage: miracl_seg_clarity_neurons_wrapper.sh

	A GUI will open to choose your input clarity folder (with .tif files)

	The folder should contain data from one channel

		----------

	For command-line / scripting

	Usage: miracl_seg_clarity_neurons_wrapper.sh -d <clarity dir> -t <channel type: sparse or nuclear>

	Example: miracl_seg_clarity_neurons_wrapper.sh -d my_clarity_tifs -t sparse

		arguments (required):

			d. Input clarity directory (including .tif images of one channel)

		Optional arguments:

			t. Channel type: sparse (like Thy1 YFP) [default] or nuclear (like PI)

		----------

	Dependencies:

		- Fiji

		- Fiji Plugins:

		1) 3D Segmentation plugins (3D ImageJ suite)
		http://imagejdocu.tudor.lu/doku.php?id=plugin:stacks:3d_ij_suite:start

		2) Mathematical Morphology plugins
		http://imagej.net/MorphoLibJ


	________________________________________________
	________________________________________________



2) Voxelize segmentation results
_________________________

    Usage: mouse_par_voxelize_seg.py -s [binary segmentation tif]

	Voxelizes segmentation results into density maps with Allen atlas resolution

	example: mouse_single_corr_lbls.py -s seg_bin.tif

			arguments (required):

			s. Binary segmentation tif file


	Dependencies:

	    Python 2.7
	    used modules:
	        argparse, numpy, scipy, logging, cv2, nibabel, tifffile, joblib, multiprocessing, os, sys, datetime


	________________________________________________
	________________________________________________



3) Compute segmenation features
_________________________


    Usage: mouse_feat_extract.py -s [segmentation tif] -l [Labels]

    Computes features of segmented image and summarizes them per label

    example: mouse_feat_extract.py -s seg.tif -l allen_annotations.tif

        arguments (required):

        s. Segmentation (or voxelized segmentation) tif file

        l. Allen labels used to summarize features


    Dependencies:

        Python 2.7
        used modules:
            argparse, numpy, scipy, skimage, pandas, tifffile, joblib, multiprocessing, os, sys, datetime

	________________________________________________
	________________________________________________



