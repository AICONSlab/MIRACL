MIRACL SEGMENTATION WIKI
________________________


1) CLARITY whole-brain Registration workflow
____________________________________________


miracl_workflow_registration_clarity-allen_wb.sh

    Workflow (wrapper) combining multiple MIRACL functions:

    1) Sets orientation of input data using a GUI
    2) Converts TIFF to NII
	3) Registers CLARITY data (down-sampled images) to Allen Reference mouse brain atlas
	4) Warps Allen annotations to the original high-res CLARITY space
	5) Warps the higher-resolution CLARITY to Allen space

    Executes:

        io/miracl_set_orient_gui.py (if run in GUI mode)
        io/miracl_convertTIFFtoNII.py
        reg/miracl_reg_clar-allen_whole_brain.sh

    Usage: `basename $0`

        A GUI will open to set data orientation
        For the "miracl_convertTIFFtoNII.py" & "miracl_reg_clar-allen_whole_brain.sh" default parameters will be chosen

    ----------

	For command-line / scripting

    Usage: `basename $0` -f [Tiff folder]

    Example: `basename $0` -f my_tifs -n "-d 5" -r "-o ARS -m combined -v 25"

        arguments (required):

            f. Input Clarity tif dir/folder

        optional arguments (don't forget the quotes):

            conversion to nii (invoked by -n " "):

            d.  [ Downsample ratio (default: 5) ]
            cn. [ chan # for extracting single channel from multiple channel data (default: 1) ]
            cp. [ chan prefix (string before channel number in file name). ex: C00 ]
            ch. [ output chan name (default: eyfp) ]
            vx. [ original resolution in x-y plane in um (default: 5) ]
            vz. [ original thickness (z-axis resolution / spacing between slices) in um (default: 5) ]
            c.  [ nii center (default: 5.7 -6.6 -4) corresponding to Allen atlas nii template ]

            Registration (invoked by -r " "):

            o. Orient code (default: ALS)
            to orient nifti from original orientation to "standard/Allen" orientation

            m. Warp allen labels with hemisphere split (Left different than Right labels) or combined (L & R same labels / Mirrored)
            accepted inputs are: <split> or <combined>  (default: split)

            v. Labels voxel size/Resolutin of labels in um
                accepted inputs are: 10, 25 or 50  (default: 10)

            l. image of input Allen Labels to warp (default: annotation_hemi_split_10um.nii.gz - which are at a resolution of 0.01mm/10um)
                input could be at a different depth than default labels

                If l. is specified (m & v cannot be speficied)


	----------

	Main Outputs


		reg_final/clar_allen_space.nii.gz: Clarity data in Allen reference space

        reg_final/clar_downsample_res(vox)um.nii.gz : Clarity data downsampled and oriented to "standard"

		reg_final/annotation_hemi_(hemi)_(vox)um_clar_downsample.nii.gz : Allen lables registered to downsampled Clarity

        reg_final/annotation_hemi_(hemi)_(vox)um_clar.tif: Allen lables registered to original Clarity


        - To visualize clarity data in Allen space - assuming chosen v/vox 10um
            from command line:

                itksnap -g $allen10 -o reg_final/clar_allen_space.nii.gz -s $lbls10 -l $snaplut

            from GUI:

                $allen10 = $MIRACL_HOME/atlases/ara/template/average_template_10um.nii.gz ->  (Main Image)

                $lbls10 = $MIRACL_HOME/atlases/ara/annotation/annotation_hemi_combined_10um.nii.gz -> (Segmentation)

                $snaplut = $MIRACL_HOME/atlases/ara/ara_snaplabels_lut.txt -> (Label Descriptions)


        - To visualize Allen labels in downsampled clarity data space (from command line):

            itksnap -g clar_downsample_res(vox)um.nii.gz -s reg_final/annotation_hemi_(hemi)_(vox)um_clar_downsample.nii.gz


        - Full resolution Allen labels in original clarity space (.tif) can be visualized by Fiji


    ----------


	----------

	Dependencies:

		- ANTs
		https://github.com/stnava/ANTs

		- c3d
		https://sourceforge.net/projects/c3d


	________________________________________________
	________________________________________________


2) CLARITY Segmentation workflow
________________________________


miracl_workflow_segmentation_clarity.sh


   Workflow (wrapper) combining multiple MIRACL functions:

    1) Segments neurons in cleared mouse brain of sparse or nuclear stains in 3D
    2) Voxelizes segmentation results into density maps with Allen atlas resolution
	3) Computes features of segmented image and summarizes them per label

    Executes:

        seg/miracl_seg_clarity_neurons_wrapper.sh
        seg/miracl_seg_voxelize_parallel.py
        seg/miracl_seg_feat_extract.py


    Usage: `basename $0`

        A GUI will open to choose folder with tif files for segmentation (folder must have one channel)

        Channel type is assumed to be sparse

        For feature extraction the "reg_final/annotation_hemi_combined_(vox)um_clar_vox.tif" file must exist where the script is started

    ----------

	For command-line / scripting

    Usage: `basename $0` -f [Tiff folder]

    Example: `basename $0` -f my_tifs -t nuclear -s "-p C000" -e "-l reg_final/annotation_hemi_combined_25um_clar_vox.tif"

        arguments (required):

            f. Input Clarity tif dir/folder

            t. Channel type: sparse (like Thy1 YFP) or nuclear (like PI)

        optional arguments (don't forget the quotes):

            Segmentation (invoked by -s " "):

			    p. Channel prefix & number if multiple channels (like Filter0001)

            Feature extraction (invoked by -e " "):

                l. Allen labels (registered to clarity) used to summarize features

                    reg_final/annotation_hemi_(hemi)_(vox)um_clar_vox.tif


	----------

	Main Outputs


        segmentation/seg.tif (.mhd) or seg_nuclear.tif (.mhd) : segmentation image with all labels (cells)
        segmentation/seg_bin.tif (.mhd) or seg_bin_nuclear.tif (.mhd) : binarized segmentation image

        voxelized_seg.(tif/nii)  (segmnetation results voxelized to ARA resolution)
        voxelized_seg_bin.(tif/nii) (binarized version)

        clarity_segmentation_features_ara_labels.csv  (segmentation features summarized per ARA lables)


        Results can be openned in Fiji for visualization


    ----------

    Dependencies:

		- Fiji

		- Fiji Plugins:

		1) 3D Segmentation plugins (3D ImageJ suite)
		http://imagejdocu.tudor.lu/doku.php?id=plugin:stacks:3d_ij_suite:start

		2) Mathematical Morphology plugins
		http://imagej.net/MorphoLibJ



	________________________________________________
	________________________________________________

