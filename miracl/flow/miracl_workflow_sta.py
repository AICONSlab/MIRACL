# Edward Ntiri, 2021 February

import argparse
import os
import sys
import subprocess

from miracl.sta.miracl_sta_track_primary_eigen import track_primary_eigen

def helpmsg():
	return '''
    Workflow (wrapper) for structure tensor analysis (STA):

    1) Converts Tiff stack to nii (& down-sample)
    2) Uses registered labels to create seed mask & creates brain mask
	3) Run STA analysis

    Executes:
        conv/miracl_conv_convertTifftoNII.py
        lbls/miracl_lbls_get_graph_info.py
        lbls/miracl_lbls_generate_parents_at_depth.py
        utilfn/miracl_extract_lbl.py
        utilfn/miracl_create_brain_mask.py
        sta/miracl_sta_track_primary_eigen.py
        lbls/miracl_lbls_stats.py
        sta/miracl_sta_gen_tract_density.py

    Usage: `basename $0`

        A GUI will open to choose folder with tif files for STA and the registered Allen labels

        and choosing STA parameters
  
    ----------

	For command-line / scripting

    Usage: `basename $0` -f [Tiff folder] -o [output nifti] -l [Allen seed label] -m [ hemisphere ] -r [Reg final dir] -d [ downsample ratio ]

    Example: `basename $0` -f my_tifs -o clarity_virus -l PL -m combined -r clar_reg_final -d 5 -c AAV g 0.5 -k 0.5 -a 25

    Or for right PL:

    Example: `basename $0` -f my_tifs -o clarity_virus -l RPL -m split -r clar_reg_final -d 5 -c AAV -g 0.5 -k 0.5 -a 25

        arguments (required):
            f. Input Clarity tif folder/dir [folder name without spaces]
            o. Output nifti
            l. Seed label abbreviation (from Allen atlas ontology)
            r. CLARITY final registration folder
            m. Labels hemi
            g. [ Derivative of Gaussion (dog) sigma ]
            k. [ Gaussian smoothing sigma ]
            a. [ Tracking angle threshold ]

        optional arguments:
            d. Downsample ratio (default: 5)
            c. Output channel name
            n. chan # for extracting single channel from multiple channel data (default: 0)
            p. chan prefix (string before channel number in file name). ex: C00
            x. original resolution in x-y plane in um (default: 5)
            z. original thickness (z-axis resolution / spacing between slices) in um (default: 5)
            bm. brain mask (to replace brain mask automatically generated by workflow)
            sm. seed mask (in place of regional seed mask generated by workflow)
            dfx. dilation factor for the x (factor to dilate seed label by)
            dfy. dilation factor (factor to dilate seed label by)
            dfz. dilation factor (factor to dilate seed label by)

	----------
	Main Outputs
        tract file = clarity_sta_[label]_seed/dog[dog]_gauss[gauss]/filter_ang[angle].trk
        virus stats csv = virus_signal_stats_depth_[depth].csv
        streamline density stats csv = sta_streamlines_density_stats_depth_[depth].csv
    ----------

	'''


def parsefn():
    parser = argparse.ArgumentParser(description='', usage=helpmsg())

    parser.add_argument('-i', '--input_clar', type=str, help="Input down-sampled clarity nifti (.nii/.nii.gz)", required=True)
    parser.add_argument('-b', '--brainmask', type=str, help="Brain mask (.nii/.nii.gz)", required=True)
    parser.add_argument('-s', '--seedmask', type=str, help="Seed mask (.nii/.nii.gz)", required=True)
    parser.add_argument('-a', '--angles', nargs='*', help="Tracking angle threshold", default=[45, 60])
    parser.add_argument('-g', '--dogs', nargs='*', help="derivative of gaussian (dog) sigma", default=[3,5])
    parser.add_argument('-k', '--gausses', nargs='*', help="Gaussian smoothing sigma", default=[3,5])
    parser.add_argument('-sl', '--step_length', nargs='*', help="Step length, in the unit of minimum voxel size", default=[0.1])
    parser.add_argument('-rk', '--rk2', action='store_true',
                            help="use 2nd order runge-kutta method for tracking")
    parser.add_argument('-o', '--outdir', type=str, help="Output directory", default='clarity_sta')

    return parser


def parse_inputs(parser, args):
    input_clar = args.input_clar
    brainmask = args.brainmask
    seedmask = args.seedmask
    outdir = args.outdir
    rk2 = True if args.rk2 else False

    # cast input lists from strs to ints
    try:
        angles = args.angles.split(',') if ',' in args.angles else list(map(int, args.angles))
        dogs = args.dogs.split(',') if ',' in args.dogs else list(map(float, args.dogs))
        gausses = args.gausses.split(',') if ',' in args.gausses else list(map(float, args.gausses))
        step_lengths = args.step_length.split(',') if ',' in args.step_length else list(map(float, args.step_length))
    except Exception as e:
        raise

    return input_clar, brainmask, seedmask, angles, dogs, gausses, step_lengths, rk2, outdir


def main(args):
    parser = parsefn()
    filename, bmask, smask, angles, dog_sigmas, gauss_sigmas, step_lengths, rk2, output_dir = parse_inputs(parser, args)
    print(step_lengths)

    # run sta tract generation
    print('Running Structure Tensor Analysis\n')
    track_primary_eigen(filename, dog_sigmas, gauss_sigmas, bmask, smask, angles, step_lengths, rk2, output_dir)


if __name__ == "__main__":
    main(sys.argv)